#include <windows.h>
#include <GL/glut.h>
#include <iostream>  // For std::cin and std::cout
#include <cmath>     // For fabs()
using namespace std;

// Global variables for line coordinates
double x1_coord, y1_coord, x2_coord, y2_coord;

// Initialization function to set up OpenGL
void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);  // Set background color to white
    glColor3f(0.0, 0.0, 0.0);          // Set the line color to black
    glPointSize(3.0);                  // Increase point size to make points more visible
    glMatrixMode(GL_PROJECTION);       // Specify the projection matrix
    glLoadIdentity();                  // Load identity matrix for projections
    // Set the coordinate system to zoom in, this range will "zoom" into small values
    gluOrtho2D(0.0, 50.0, 0.0, 50.0);  // Adjust the range for better zoom, modify as per your need
}

// Display function that draws the line using the DDA algorithm
void display() {
    glClear(GL_COLOR_BUFFER_BIT);  // Clear the display window

    // Calculate differences in x and y coordinates
    double dx = x2_coord - x1_coord;
    double dy = y2_coord - y1_coord;

    // Determine the number of steps to take based on the greater difference
    double steps = (fabs(dx) > fabs(dy)) ? fabs(dx) : fabs(dy);

    // Calculate the increment values for each step
    double xIncrement = dx / steps;
    double yIncrement = dy / steps;

    // Set initial values of x and y
    double x = x1_coord;
    double y = y1_coord;

    // Print the initial point
    cout << "Step-by-step Points Generated by DDA Line Algorithm:" << endl;
    cout << "Initial Point: (" << x << ", " << y << ")" << endl;

    // Begin drawing points
    glBegin(GL_POINTS);
    for (int i = 0; i <= steps; i++) {
        // Plot the point by casting x and y to integers
        glVertex2i(static_cast<int>(x), static_cast<int>(y));

        // Print the current step and point
        cout << "Step " << i + 1 << ": (" << x << ", " << y << ")" << endl;

        // Increment x and y for the next point
        x += xIncrement;
        y += yIncrement;
    }
    glEnd();

    glFlush();  // Process all OpenGL commands
}

// Main function that runs the OpenGL program
int main(int argc, char** argv) {
    // Prompt the user for input using C++ standard input
    cout << "Enter the coordinates of the first point (x1, y1): ";
    cin >> x1_coord >> y1_coord;

    cout << "Enter the coordinates of the second point (x2, y2): ";
    cin >> x2_coord >> y2_coord;

    // Initialize GLUT and OpenGL
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("DDA Line Algorithm");

    // Set up OpenGL settings
    init();

    // Register the display function for rendering the line
    glutDisplayFunc(display);

    // Start the GLUT event processing loop
    glutMainLoop();

    return 0;
}
