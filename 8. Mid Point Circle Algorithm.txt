#include <windows.h>
#include <GL/glut.h>
#include <iostream>
#include <cmath>
using namespace std;

// Global variable for the circle radius
int radius;

// Initialization function to set up OpenGL
void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);  // Set background color to white
    glColor3f(0.0, 0.0, 0.0);          // Set the line color to black
    glPointSize(3.0);                  // Increase point size to make points more visible
    glMatrixMode(GL_PROJECTION);       // Specify the projection matrix
    glLoadIdentity();                  // Load identity matrix for projections
    gluOrtho2D(-50.0, 50.0, -50.0, 50.0);  // Adjust the range for better zoom
}

// Function to draw symmetric points of the circle
void drawCirclePoints(int xCenter, int yCenter, int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(xCenter + x, yCenter + y);  // Octant 1
    glVertex2i(xCenter - x, yCenter + y);  // Octant 4
    glVertex2i(xCenter + x, yCenter - y);  // Octant 8
    glVertex2i(xCenter - x, yCenter - y);  // Octant 5
    glVertex2i(xCenter + y, yCenter + x);  // Octant 2
    glVertex2i(xCenter - y, yCenter + x);  // Octant 3
    glVertex2i(xCenter + y, yCenter - x);  // Octant 7
    glVertex2i(xCenter - y, yCenter - x);  // Octant 6
    glEnd();
}

// Midpoint Circle Algorithm
void midpointCircle() {
    glClear(GL_COLOR_BUFFER_BIT);  // Clear the display window

    int xCenter = 0, yCenter = 0;  // Center of the circle
    int x = 0;
    int y = radius;
    int p = 1 - radius;  // Initial decision parameter

    cout << "Midpoint Circle Algorithm Points:" << endl;
    cout << "Initial Point: (" << x << ", " << y << ")" << endl;

    // Plot the initial set of points
    drawCirclePoints(xCenter, yCenter, x, y);

    // Loop to plot the remaining points
    while (x <= y) {
        if (p < 0) {
            p += 2 * x + 3;
        } else {
            p += 2 * (x - y) + 5;
            y--;
        }
        x++;

        // Plot the symmetric points
        drawCirclePoints(xCenter, yCenter, x, y);

        // Print the current point
        cout << "Point: (" << x << ", " << y << ")" << endl;
    }

    glFlush();  // Process all OpenGL commands
}

// Display function for the Midpoint Circle Algorithm
void display() {
    midpointCircle();
}

// Main function that runs the OpenGL program
int main(int argc, char** argv) {
    // Prompt the user for input
    cout << "Enter the radius of the circle: ";
    cin >> radius;

    // Initialize GLUT and OpenGL
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Midpoint Circle Algorithm");

    // Set up OpenGL settings
    init();

    // Register the display function for rendering the circle
    glutDisplayFunc(display);

    // Start the GLUT event processing loop
    glutMainLoop();

    return 0;
}
